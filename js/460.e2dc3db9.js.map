{"version":3,"file":"js/460.e2dc3db9.js","mappings":"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","sources":["webpack://chatall/./node_modules/langchain/dist/chains/combine_docs_chain.js","webpack://chatall/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js","webpack://chatall/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js","webpack://chatall/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js","webpack://chatall/./node_modules/langchain/dist/chains/question_answering/load.js","webpack://chatall/./node_modules/langchain/dist/chains/vector_db_qa.js"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n","/* eslint-disable spaced-comment */\nimport { ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, PromptTemplate, } from \"@langchain/core/prompts\";\nimport { ConditionalPromptSelector, isChatModel, } from \"@langchain/core/example_selectors\";\nexport const DEFAULT_QA_PROMPT = /*#__PURE__*/ new PromptTemplate({\n    template: \"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\\n\\n{context}\\n\\nQuestion: {question}\\nHelpful Answer:\",\n    inputVariables: [\"context\", \"question\"],\n});\nconst system_template = `Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_PROMPT = /*#__PURE__*/ ChatPromptTemplate.fromMessages(messages);\nexport const QA_PROMPT_SELECTOR = /*#__PURE__*/ new ConditionalPromptSelector(DEFAULT_QA_PROMPT, [[isChatModel, CHAT_PROMPT]]);\n","/* eslint-disable spaced-comment */\nimport { ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, PromptTemplate, } from \"@langchain/core/prompts\";\nimport { ConditionalPromptSelector, isChatModel, } from \"@langchain/core/example_selectors\";\nconst qa_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:`;\nexport const DEFAULT_COMBINE_QA_PROMPT = \n/*#__PURE__*/\nPromptTemplate.fromTemplate(qa_template);\nconst system_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_QA_PROMPT = /*#__PURE__*/ ChatPromptTemplate.fromMessages(messages);\nexport const COMBINE_QA_PROMPT_SELECTOR = \n/*#__PURE__*/ new ConditionalPromptSelector(DEFAULT_COMBINE_QA_PROMPT, [\n    [isChatModel, CHAT_QA_PROMPT],\n]);\nconst combine_prompt = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n\nQUESTION: Which state/country's law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\\n\\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\\n\\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\\n\\n11.9 No Third-Party Beneficiaries.\n\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n=========\nFINAL ANSWER: This Agreement is governed by English law.\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \\n\\nLast year COVID-19 kept us apart. This year we are finally together again. \\n\\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \\n\\nWith a duty to one another to the American people to the Constitution. \\n\\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \\n\\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \\n\\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \\n\\nHe met the Ukrainian people. \\n\\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \\n\\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n\nContent: And we won’t stop. \\n\\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \\n\\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \\n\\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \\n\\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \\n\\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \\n\\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \\n\\nOfficer Mora was 27 years old. \\n\\nOfficer Rivera was 22. \\n\\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \\n\\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \\n\\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \\n\\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \\n\\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \\n\\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \\n\\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \\n\\nBut I want you to know that we are going to be okay.\n\nContent: More support for patients and families. \\n\\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \\n\\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \\n\\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \\n\\nA unity agenda for the nation. \\n\\nWe can do this. \\n\\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \\n\\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \\n\\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \\n\\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \\n\\nNow is the hour. \\n\\nOur moment of responsibility. \\n\\nOur test of resolve and conscience, of history itself. \\n\\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \\n\\nWell I know this nation.\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:`;\nexport const COMBINE_PROMPT = \n/*#__PURE__*/ PromptTemplate.fromTemplate(combine_prompt);\nconst system_combine_template = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n----------------\n{summaries}`;\nconst combine_messages = [\n    /*#__PURE__*/ SystemMessagePromptTemplate.fromTemplate(system_combine_template),\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_COMBINE_PROMPT = \n/*#__PURE__*/ ChatPromptTemplate.fromMessages(combine_messages);\nexport const COMBINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new ConditionalPromptSelector(COMBINE_PROMPT, [\n    [isChatModel, CHAT_COMBINE_PROMPT],\n]);\n","/* eslint-disable spaced-comment */\nimport { PromptTemplate, ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, AIMessagePromptTemplate, } from \"@langchain/core/prompts\";\nimport { ConditionalPromptSelector, isChatModel, } from \"@langchain/core/example_selectors\";\nexport const DEFAULT_REFINE_PROMPT_TMPL = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nexport const DEFAULT_REFINE_PROMPT = /*#__PURE__*/ new PromptTemplate({\n    inputVariables: [\"question\", \"existing_answer\", \"context\"],\n    template: DEFAULT_REFINE_PROMPT_TMPL,\n});\nconst refineTemplate = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst messages = [\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n    /*#__PURE__*/ AIMessagePromptTemplate.fromTemplate(\"{existing_answer}\"),\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(refineTemplate),\n];\nexport const CHAT_REFINE_PROMPT = \n/*#__PURE__*/ ChatPromptTemplate.fromMessages(messages);\nexport const REFINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new ConditionalPromptSelector(DEFAULT_REFINE_PROMPT, [\n    [isChatModel, CHAT_REFINE_PROMPT],\n]);\nexport const DEFAULT_TEXT_QA_PROMPT_TMPL = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer the question: {question}`;\nexport const DEFAULT_TEXT_QA_PROMPT = /*#__PURE__*/ new PromptTemplate({\n    inputVariables: [\"context\", \"question\"],\n    template: DEFAULT_TEXT_QA_PROMPT_TMPL,\n});\nconst chat_qa_prompt_template = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer any questions`;\nconst chat_messages = [\n    /*#__PURE__*/ SystemMessagePromptTemplate.fromTemplate(chat_qa_prompt_template),\n    /*#__PURE__*/ HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nexport const CHAT_QUESTION_PROMPT = \n/*#__PURE__*/ ChatPromptTemplate.fromMessages(chat_messages);\nexport const QUESTION_PROMPT_SELECTOR = \n/*#__PURE__*/ new ConditionalPromptSelector(DEFAULT_TEXT_QA_PROMPT, [\n    [isChatModel, CHAT_QUESTION_PROMPT],\n]);\n","import { LLMChain } from \"../llm_chain.js\";\nimport { StuffDocumentsChain, MapReduceDocumentsChain, RefineDocumentsChain, } from \"../combine_docs_chain.js\";\nimport { QA_PROMPT_SELECTOR } from \"./stuff_prompts.js\";\nimport { COMBINE_PROMPT_SELECTOR, COMBINE_QA_PROMPT_SELECTOR, } from \"./map_reduce_prompts.js\";\nimport { QUESTION_PROMPT_SELECTOR, REFINE_PROMPT_SELECTOR, } from \"./refine_prompts.js\";\nexport const loadQAChain = (llm, params = { type: \"stuff\" }) => {\n    const { type } = params;\n    if (type === \"stuff\") {\n        return loadQAStuffChain(llm, params);\n    }\n    if (type === \"map_reduce\") {\n        return loadQAMapReduceChain(llm, params);\n    }\n    if (type === \"refine\") {\n        return loadQARefineChain(llm, params);\n    }\n    throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nexport function loadQAStuffChain(llm, params = {}) {\n    const { prompt = QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n    const llmChain = new LLMChain({ prompt, llm, verbose });\n    const chain = new StuffDocumentsChain({ llmChain, verbose });\n    return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nexport function loadQAMapReduceChain(llm, params = {}) {\n    const { combineMapPrompt = COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm), combinePrompt = COMBINE_PROMPT_SELECTOR.getPrompt(llm), verbose, combineLLM, returnIntermediateSteps, } = params;\n    const llmChain = new LLMChain({ prompt: combineMapPrompt, llm, verbose });\n    const combineLLMChain = new LLMChain({\n        prompt: combinePrompt,\n        llm: combineLLM ?? llm,\n        verbose,\n    });\n    const combineDocumentChain = new StuffDocumentsChain({\n        llmChain: combineLLMChain,\n        documentVariableName: \"summaries\",\n        verbose,\n    });\n    const chain = new MapReduceDocumentsChain({\n        llmChain,\n        combineDocumentChain,\n        returnIntermediateSteps,\n        verbose,\n    });\n    return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nexport function loadQARefineChain(llm, params = {}) {\n    const { questionPrompt = QUESTION_PROMPT_SELECTOR.getPrompt(llm), refinePrompt = REFINE_PROMPT_SELECTOR.getPrompt(llm), refineLLM, verbose, } = params;\n    const llmChain = new LLMChain({ prompt: questionPrompt, llm, verbose });\n    const refineLLMChain = new LLMChain({\n        prompt: refinePrompt,\n        llm: refineLLM ?? llm,\n        verbose,\n    });\n    const chain = new RefineDocumentsChain({\n        llmChain,\n        refineLLMChain,\n        verbose,\n    });\n    return chain;\n}\n","import { BaseChain } from \"./base.js\";\nimport { loadQAStuffChain } from \"./question_answering/load.js\";\n/**\n * Class that represents a VectorDBQAChain. It extends the `BaseChain`\n * class and implements the `VectorDBQAChainInput` interface. It performs\n * a similarity search using a vector store and combines the search\n * results using a specified combine documents chain.\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/modules/chains/ | createRetrievalChain}\n * Will be removed in 0.2.0\n */\nexport class VectorDBQAChain extends BaseChain {\n    static lc_name() {\n        return \"VectorDBQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"vectorstore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.vectorstore = fields.vectorstore;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.k = fields.k ?? this.k;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.vectorstore.similaritySearch(question, this.k, values.filter, runManager?.getChild(\"vectorstore\"));\n        const inputs = { question, input_documents: docs };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"vector_db_qa\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"vectorstore\" in values)) {\n            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);\n        }\n        const { vectorstore } = values;\n        if (!data.combine_documents_chain) {\n            throw new Error(`VectorDBQAChain must have combine_documents_chain in serialized data`);\n        }\n        return new VectorDBQAChain({\n            combineDocumentsChain: await BaseChain.deserialize(data.combine_documents_chain),\n            k: data.k,\n            vectorstore,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_documents_chain: this.combineDocumentsChain.serialize(),\n            k: this.k,\n        };\n    }\n    /**\n     * Static method that creates a VectorDBQAChain instance from a\n     * BaseLanguageModel and a vector store. It also accepts optional options\n     * to customize the chain.\n     * @param llm The BaseLanguageModel instance.\n     * @param vectorstore The vector store used for similarity search.\n     * @param options Optional options to customize the chain.\n     * @returns A new instance of VectorDBQAChain.\n     */\n    static fromLLM(llm, vectorstore, options) {\n        const qaChain = loadQAStuffChain(llm);\n        return new this({\n            vectorstore,\n            combineDocumentsChain: qaChain,\n            ...options,\n        });\n    }\n}\n"],"names":["StuffDocumentsChain","lc_name","inputKeys","this","inputKey","llmChain","filter","key","documentVariableName","outputKeys","constructor","fields","super","Object","defineProperty","enumerable","configurable","writable","value","_prepInputs","values","Error","docs","rest","texts","map","pageContent","text","join","_call","runManager","result","call","getChild","_chainType","deserialize","data","llm_chain","LLMChain","serialize","_type","MapReduceDocumentsChain","combineDocumentChain","ensureMapStep","maxTokens","maxIterations","returnIntermediateSteps","currentDocs","intermediateSteps","i","inputs","d","canSkipMapStep","formatted","prompt","format","length","_getNumTokens","withinTokenLimit","results","apply","Array","from","_","undefined","outputKey","concat","r","metadata","newInputs","combine_document_chain","RefineDocumentsChain","defaultDocumentPrompt","inputVariables","template","Set","refineLLMChain","initialResponseName","documentPrompt","_constructInitialInputs","doc","baseInfo","page_content","documentInfo","forEach","baseInputs","_constructRefineInputs","res","initialInputs","predict","refineSteps","refineInputs","push","SerializedLLMChain","SerializedRefineDocumentChain","refine_llm_chain","DEFAULT_QA_PROMPT","system_template","messages","fromTemplate","CHAT_PROMPT","fromMessages","QA_PROMPT_SELECTOR","qa_template","DEFAULT_COMBINE_QA_PROMPT","CHAT_QA_PROMPT","combine_prompt","COMBINE_PROMPT","system_combine_template","combine_messages","CHAT_COMBINE_PROMPT","DEFAULT_REFINE_PROMPT_TMPL","DEFAULT_REFINE_PROMPT","refineTemplate","CHAT_REFINE_PROMPT","DEFAULT_TEXT_QA_PROMPT_TMPL","DEFAULT_TEXT_QA_PROMPT","chat_qa_prompt_template","chat_messages","CHAT_QUESTION_PROMPT","loadQAStuffChain","llm","params","getPrompt","verbose","chain","VectorDBQAChain","combineDocumentsChain","returnSourceDocuments","vectorstore","k","question","similaritySearch","input_documents","sourceDocuments","combine_documents_chain","fromLLM","options","qaChain"],"sourceRoot":""}